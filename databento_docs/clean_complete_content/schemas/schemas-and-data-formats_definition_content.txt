# Schemas and data formats | Databento Docs
Category: Schemas
Source: schemas-and-data-formats_definition.html
================================================================================

Quickstart
Set up Databento
Choose a service
Build your first application
New user guides
Examples and tutorials
Equities
Equities: Introduction
Top pre-market movers
Find average spread for a symbol
Futures
Futures: Introduction
Volume, open interest, and settlement prices
Futures trading hours
Options
Equity options: Introduction
Options on futures: Introduction
All options with a given underlying
Join options with underlying prices
US equity options volume by venue
Resample US equity options NBBO
Estimate implied volatility
Get symbols for 0DTE options
Live data
Handle multiple record types
Stream live data to a file
Estimate Databento feed latency
Calculate TICK and TRIN indicators
Subscribe to MBO snapshot
Compare on-exchange and off-exchange trade volume
Historical data
Request a large number of symbols
Programmatic batch downloads
Best bid, best offer, and midprice
Constructing OHLCV bars from the Trades schema
Join schemas on instrument ID
Plot a candlestick chart
Calculate VWAP and RSI
End-of-day pricing and portfolio valuation
Benchmark portfolio performance
Market halts, volatility interrupts, and price bands
Symbology
Continuous contracts
Parent symbology
Symbology mapping for live data
Dataset symbols
Instrument definitions
Finding liquid instruments
Handling tick sizes
Order book
Types of order book events
State management of resting orders
Limit order book construction
Microprice, book imbalance, and book pressure
Queue position of an order
Algorithmic trading
A high-frequency liquidity-taking strategy
Build prediction models with machine learning
Execution slippage and markouts
Matching engine latencies
Using messaging rates as a proxy for implied volatility
Mean reversion and portfolio optimization
Pairs trading based on cointegration
Build a real-time stock screener
Corporate actions
Dividends
New listings
Splits and reverse splits
Mergers and demergers
Adjustment factors
Applying adjustment factors
Handling multiple stock selections
Security master
Enrich instrument definitions
Listings and delistings
Market capitalization change
Core concepts
Schemas and data formats
What's a schema?
Market by order (MBO)
Market by price (MBP-10)
Market by price (MBP-1)
BBO on trade (TBBO)
BBO on interval (BBO)
Trades
Aggregate bars (OHLCV)
Instrument definitions
Imbalance
Statistics
Status
Corporate actions
Adjustment factors
Security master
Standards and conventions
Common fields, enums and types
Normalization
Symbology
Databento Binary Encoding
Zstandard (zstd)
MBO snapshots
Reference data enums
Architecture
Databento architecture
Timestamping
Locations and network connectivity
Dedicated connectivity
Databento NTP service
Performance optimization
Venues and datasets
CME Globex MDP 3.0
Cboe BYX Depth
Cboe BYZ Depth
Cboe EDGA Depth
Cboe EDGX Depth
Databento US Equities Basic
Databento US Equities Mini
Databento US Equities Summary
European Energy Exchange
Eurex Exchange
ICE Endex iMpact
ICE Europe Commodities iMpact
ICE Europe Financials iMpact
ICE Futures US iMpact
IEX TOPS
MEMX Memoir
MIAX Depth of Market
Nasdaq Basic with NLS Plus
Nasdaq TotalView-ITCH
NYSE American Integrated
NYSE Arca Integrated
NYSE Texas Integrated
NYSE National Trades and BBO
NYSE Integrated
OPRA Pillar
Corporate actions
Adjustment factors
Security master
API Reference
Historical API
Basics
Overview
Authentication
Schemas and conventions
Datasets
Symbology
Encodings
Compression
Dates and times
Errors
Rate limits
Size limits
Metered pricing
Versioning
Client
Historical
Metadata....list_publishers....list_datasets....list_schemas....list_fields....list_unit_prices....get_dataset_condition....get_dataset_range....get_record_count....get_billable_size....get_cost
Time series....get_range....get_range_async
Symbology....resolve
Batch downloads....submit_job....list_jobs....list_files....download....download_async
Helpers
DBNStore
....from_bytes....from_file....reader....replay....request_full_definitions....request_symbology....to_csv....to_df....to_file....to_json....to_ndarray....to_parquet....__iter__....insert_symbology_json
map_symbols_csv
map_symbols_json
Live API
Basics
Overview
Authentication
Sessions
Schemas and conventions
Datasets
Symbology
Dates and times
Intraday replay
Snapshot
System messages
Errors
Connection limits
Metered pricing
Error detection
Versioning
Recovering after a disconnection
Maintenance schedule
Client
Live
....add_callback....add_stream....add_reconnect_callback....block_for_close....start....stop....subscribe....terminate....wait_for_close....__aiter__....__iter__
Reference API
Basics
Overview
Authentication
Symbology
Dates and times
Errors
Rate limits
Client
Reference
Corporate actions....get_range
Adjustment factors....get_range
Security master....get_last....get_range
Resources
FAQs
Client libraries vs. APIs
Streaming vs. batch download
Usage-based pricing and credits
Instruments and products
Venues and publishers
MBP-1 vs. TBBO vs. BBO schemas
Portal
Data catalog
Batch download
Data usage
API keys
Download center
Team
Billing
Plans and live data
Release notes
0.38.1 - 2025-06-17
0.38.0 - 2025-06-10
0.37.1 - 2025-06-03
0.37.0 - 2025-06-03
0.36.0 - 2025-05-27
0.35.1 - 2025-05-20
0.35.0 - 2025-05-13
0.34.2 - 2025-05-06
0.34.1 - 2025-04-29
0.34.0 - 2025-04-22
0.33.0 - 2025-04-15
0.32.1 - 2025-04-07
0.32.0 - 2025-04-02
0.31.0 - 2025-03-18
0.30.0 - 2025-02-11
0.29.0 - 2025-02-04
0.28.0 - 2025-01-21
0.27.0 - 2025-01-07
0.26.0 - 2024-12-17
0.25.0 - 2024-11-12
0.24.0 - 2024-10-22
0.23.0 - 2024-09-25
0.22.0 - 2024-08-27
0.21.0 - 2024-07-30
0.20.1 - 2024-07-16
0.20.0 - 2024-07-09
0.19.1 - 2024-06-25
0.19.0 - 2024-06-04
0.18.1 - 2024-05-22
0.18.0 - 2024-05-14
0.17.1 - 2024-04-08
0.17.0 - 2024-04-01
0.16.0 - 2024-03-01
0.15.0 - 2024-01-16
0.14.1 - 2023-12-18
0.14.0 - 2023-11-23
0.13.1 - 2023-10-23
0.13.0 - 2023-09-21
0.12.0 - 2023-08-24
0.11.0 - 2023-08-10
0.10.0 - 2023-07-20
0.9.1 - 2023-07-11
0.9.0 - 2023-06-13
0.8.0 - 2023-05-16
0.7.0 - 2023-04-28
0.6.1 - 2023-03-28
0.6.0 - 2023-03-24
0.5.0 - 2023-03-13
0.4.0 - 2023-03-02
0.3.0 - 2023-01-06
0.2.0 - 2022-12-01
0.1.0 - 2022-11-07
Python
0.57.1 - 2025-06-17
0.57.0 - 2025-06-10
0.56.0 - 2025-06-03
0.55.1 - 2025-06-02
0.55.0 - 2025-05-29
0.54.0 - 2025-05-13
0.53.0 - 2025-04-29
0.52.0 - 2025-04-15
0.51.0 - 2025-04-08
0.50.0 - 2025-03-18
0.49.0 - 2025-03-04
0.48.0 - 2025-01-21
0.47.0 - 2024-12-17
0.46.0 - 2024-12-10
0.45.0 - 2024-11-12
0.44.1 - 2024-10-29
0.44.0 - 2024-10-22
0.43.1 - 2024-10-15
0.43.0 - 2024-10-09
0.42.0 - 2024-09-23
0.41.0 - 2024-09-03
0.40.0 - 2024-08-27
0.39.3 - 2024-08-20
0.39.2 - 2024-08-13
0.39.1 - 2024-08-13
0.39.0 - 2024-07-30
0.38.0 - 2024-07-23
0.37.0 - 2024-07-09
0.36.3 - 2024-07-02
0.36.2 - 2024-06-25
0.36.1 - 2024-06-18
0.36.0 - 2024-06-11
0.35.0 - 2024-06-04
0.34.1 - 2024-05-21
0.34.0 - 2024-05-14
0.33.0 - 2024-04-16
0.32.0 - 2024-04-04
0.31.1 - 2024-03-20
0.31.0 - 2024-03-05
0.30.0 - 2024-02-22
0.29.0 - 2024-02-13
0.28.0 - 2024-02-01
0.27.0 - 2024-01-23
0.26.0 - 2024-01-16
0.25.0 - 2024-01-09
0.24.1 - 2023-12-15
0.24.0 - 2023-11-23
0.23.1 - 2023-11-10
0.23.0 - 2023-10-26
0.22.1 - 2023-10-24
0.22.0 - 2023-10-23
0.21.0 - 2023-10-11
0.20.0 - 2023-09-21
0.19.1 - 2023-09-08
0.19.0 - 2023-08-25
0.18.1 - 2023-08-16
0.18.0 - 2023-08-14
0.17.0 - 2023-08-10
0.16.1 - 2023-08-03
0.16.0 - 2023-07-25
0.15.2 - 2023-07-19
0.15.1 - 2023-07-06
0.15.0 - 2023-07-05
0.14.1 - 2023-06-16
0.14.0 - 2023-06-14
0.13.0 - 2023-06-02
0.12.0 - 2023-05-01
0.11.0 - 2023-04-13
0.10.0 - 2023-04-07
0.9.0 - 2023-03-10
0.8.1 - 2023-03-05
0.8.0 - 2023-03-03
0.7.0 - 2023-01-10
0.6.0 - 2022-12-02
0.5.0 - 2022-11-07
0.4.0 - 2022-09-14
0.3.0 - 2022-08-30
HTTP API
0.34.1 - 2025-06-17
0.34.0 - TBD
0.33.0 - 2024-12-10
0.32.0 - 2024-11-26
0.31.0 - 2024-11-12
0.30.0 - 2024-09-24
0.29.0 - 2024-09-03
0.28.0 - 2024-06-25
0.27.0 - 2024-06-04
0.26.0 - 2024-05-14
0.25.0 - 2024-03-26
0.24.0 - 2024-03-06
0.23.0 - 2024-02-15
0.22.0 - 2024-02-06
0.21.0 - 2024-01-30
0.20.0 - 2024-01-18
0.19.0 - 2023-10-17
0.18.0 - 2023-10-11
0.17.0 - 2023-10-04
0.16.0 - 2023-09-26
0.15.0 - 2023-09-19
0.14.0 - 2023-08-29
0.13.0 - 2023-08-23
0.12.0 - 2023-08-10
0.11.0 - 2023-07-25
0.10.0 - 2023-07-06
0.9.0 - 2023-06-01
0.8.0 - 2023-05-01
0.7.0 - 2023-04-07
0.6.0 - 2023-03-10
0.5.0 - 2023-03-03
0.4.0 - 2022-12-02
0.3.0 - 2022-08-30
0.2.0 - 2021-12-10
0.1.0 - 2021-08-30
Raw API
0.6.1 - TBD
0.6.0 - 2025-05-24
0.5.6 - 2025-04-06
0.5.5 - 2024-12-01
0.5.4 - 2024-10-02
0.5.3 - 2024-10-02
0.5.1 - 2024-07-24
2024-07-20
2024-06-25
0.5.0 - 2024-05-25
0.4.6 - 2024-04-13
0.4.5 - 2024-03-25
0.4.4 - 2024-03-23
0.4.3 - 2024-02-13
0.4.2 - 2024-01-06
0.4.0 - 2023-11-08
0.3.0 - 2023-10-20
0.2.0 - 2023-07-23
0.1.0 - 2023-05-01
Rust
0.27.1 - 2025-06-17
0.27.0 - 2025-06-10
0.26.2 - 2025-06-03
0.26.1 - 2025-05-30
0.26.0 - 2025-05-28
0.25.0 - 2025-05-13
0.24.0 - 2025-04-22
0.23.0 - 2025-04-15
0.22.0 - 2025-04-01
0.21.0 - 2025-03-18
0.20.0 - 2025-02-12
0.19.0 - 2025-01-21
0.18.0 - 2025-01-08
0.17.0 - 2024-12-17
0.16.0 - 2024-11-12
0.15.0 - 2024-10-22
0.14.1 - 2024-10-08
0.14.0 - 2024-10-01
0.13.0 - 2024-09-25
0.12.1 - 2024-08-27
0.12.0 - 2024-07-30
0.11.4 - 2024-07-16
0.11.3 - 2024-07-09
0.11.2 - 2024-06-25
0.11.1 - 2024-06-11
0.11.0 - 2024-06-04
0.10.0 - 2024-05-22
0.9.1 - 2024-05-15
0.9.0 - 2024-05-14
0.8.0 - 2024-04-01
0.7.1 - 2024-03-05
0.7.0 - 2024-03-01
0.6.0 - 2024-01-16
0.5.0 - 2023-11-23
0.4.2 - 2023-10-23
0.4.1 - 2023-10-06
0.4.0 - 2023-09-21
0.3.0 - 2023-09-13
0.2.1 - 2023-08-25
0.2.0 - 2023-08-10
0.1.0 - 2023-08-02
Data
TBD (coming soon)
2025-06-17
2024-10-22
2024-05-07
2024-06-25
2024-06-18
2024-01-18
2023-11-17
2023-10-04
2023-08-29
2023-07-23
2023-05-01
2023-04-28
2023-03-07
Schema
Schema IDs
Common names used by third parties
L3, Market by order, full order book, tick data
MBP-10
mbp-10
L2, Market by price, market depth
MBP-1Â /Â CMBP-1
mbp-1Â /Â cmbp-1
L1, Top of book, trades and quotes
BBO / CBBO
bbo-1s,Â bbo-1mÂ /Â cbbo-1s,Â cbbo-1m
L1, Top of book sampled in time space, subsampled BBO and trades
TBBO / TCBBO
tbboÂ /Â tcbbo
L1, Top of book sampled in trade space
Trades
trades
L1, Last sale, time and sales, tick-by-tick trades
OHLCV
ohlcv-1s,Â ohlcv-1m,Â ohlcv-1h,Â ohlcv-1d
L0, OHLCV bars, aggregates
Definition
definition
L0, Security definitions, reference data, symbol list
Imbalance
imbalance
L3, Auction imbalance, order imbalance, NOII
Statistics
statistics
L0, Session or daily statistics, end-of-day summary, open interest
Status
status
L0, Market or trading state/status
Market by order (MBO) provides every order book event across every price level, keyed by its order ID. This allows you to determine the queue position of each order and provides the highest level of granularity available.Market by price (MBP-10) provides every order book event across the top ten price levels, keyed by price. This includes every tradeÂ and changes to aggregate market depth, alongside total size and order count at the top ten price levels.Market by price (MBP-1) provides every order book event that updates the top price level, also known as the best bid and offer (BBO). This includes every trade and changes to book depth, alongside total size and order count at the BBO.Consolidated market by price (CMBP-1) provides every order book event that updates the top price level across all venues in the dataset, also known as the consolidated best bid and offer (CBBO). This includes every trade and changes to book depth, alongside total size and publisher attribution at the CBBO.BBO on trade (TBBO) provides every trade event alongside the BBO immediatelyÂ before the effect of each trade. This is a subset of MBP-1.Consolidated BBO on trade (TCBBO) provides every trade event alongside the consolidated BBO immediately before the effect of each trade. This is a subset of CMBP-1.BBO on interval (BBO) provides the last best bid, best offer, and sale at 1-second or 1-minute intervals. This is a subset of MBP-1.Consolidated BBO on interval (CBBO) provides the consolidated last best bid, best offer, and sale at 1-second or 1-minute intervals. This is a subset of CMBP-1.Trades provides every trade event. This is a subset of MBO.Aggregate bars (OHLCV) provide open, high, low, and close prices and total volume aggregated from trades at 1-second, 1-minute, 1-hour, or 1-day intervals.Instrument definitionsÂ provide reference information about each instrument, which includes properties like symbol, instrument name, expiration date, listing date, tick size, and strike price.ImbalanceÂ provides auction imbalance data such as paired quantity, total quantity, and auction status.StatisticsÂ provides official summary statistics of each instrument that's published by the venue. This generally includes properties like daily volume, open interest, preliminary and final settlement prices, and official open, high, and low prices.Status provides updates about the trading session, such as halts, pauses, short-selling restrictions, auction start, and other matching engine statuses. The granularity and frequency of these updates vary by publisher and dataset.See alsoThe MBP-1, BBO and TBBO schemas, as well as the CMBP-1, CBBO, and TCBBO schemas, all provide top of book data with different update space and sampling intervals. Learn more about their differences in our MBP-1 vs. BBO vs. TBBO schemas guide.Why are Databento's naming conventions different from third parties?Databento avoids terms like Level 1 (L1) or Level 2 (L2) due to their inconsistent application. For example, some vendors refer to both MBO and MBP data as L2, while others strictly refer to MBP data as L2. More misleadingly, many vendors refer to MBO data as L3, even though this doesn't follow any major trading venue's naming convention.Likewise, the termÂ tickÂ originates from the concept of a ticker tape and only refers to trades, not resting limit orders. This becomes a source of confusion when vendors use the term tick data to refer to either MBO or MBP data when it should be strictly reserved for trades data.See alsoFor more Databento naming conventions and key terminology, visit our FAQs.Special casesOur MBO, MBP-1 and MBP-10 schemas adopt the following conventions in these special cases:
Combining MBO with trades feed: Typically, MBO data provides the highest granularity, but certain venues enhance their trades feed with additional information like trades not reflected in the MBO feed, consolidated NBBO, and more. In these cases, we document the exception in our Venues and datasets section and recommend that you request both our MBO and trades schemas if you need the highest level of granularity.
Deriving one schema from anotherDatabento captures market data directly from the source and is only subscribed to the most granular feed(s) available from each publisher. Order book feeds are usually normalized into our MBO schema and top-of-book feeds are usually normalized into our MBP-1 schema.To ensure consistency between schemas, Databento doesn't source the less granular schemas from separate feeds. Instead, Databento derives all of the less granular schemas starting from the most granular schema available. As you may have noticed from our schema's descriptions, the majority of themâMBP, BBO, TBBO, trades, and OHLCVâare simply derived from MBO data.Likewise, you can also derive one schema from another losslessly on the client side, and you should expect your self-derived data to be consistent with ours. For example:
MBP-1, BBO, and Trades can be derived from MBP-10.
BBO, TBBO, and Trades can be derived from MBP-1.
Trades and OHLCV can be derived from TBBO.
OHLCV can be derived from Trades.
Deriving your own schema is useful for various reasons:
The data needs to be defined differently for your application.
Our derivation differs from those of another vendor and you want transparency.
You can cut down the number of API requests made to Databento by getting the most granular schema that you need and deriving the rest yourself.
Databento provides MBP-10 merely as a convenience feature. You can reduce bandwidth requirements, latency, and transfer time significantly by deriving MBP-10 yourself from MBO.
This is especially relevant for OHLCV, which can vary depending on how trade breaks or market halts are managed, how the start and end of each time interval are determined, and how illiquid instruments are handled if there are no trades over a given time interval. If these considerations are trivial for your use case, Databento offers OHLCV data in multiple time intervals (seconds, minutes, hours, and daily) for your convenience.The table below summarizes which schemas can be derived from the another. Each row represents the original schema, and each column represents schemas that you can derive from the original schema.
Schema
MBP-10
MBP-1
CMBP-1
TBBO
TCBBO
BBO-1s
BBO-1m
CBBO-1s
CBBO-1m
Trades
OHLCV-1s
OHLCV-1m
OHLCV-1h
OHLCV-1d
MBP-10
MBP-1
CMBP-1
TBBO
TCBBO
BBO-1s
BBO-1m
CBBO-1s
CBBO-1m
Trades
OHLCV-1s
OHLCV-1m
OHLCV-1h
OHLCV-1d
See alsoLearn how to resample trades data to other intervals, such as 5-minute intervals, from our bar aggregation tutorial.You can also learn how to generate MBP-10 from MBO data using an order book, as seen in our limit order book construction tutorial.Market by order (MBO)Market by order (MBO) provides every order book event across every price level, keyed by its order ID. This allows you to determine the queue position of each order and provides the highest level of granularity available.MBO data includes all trades, fills, adds, cancels, modifies (or replaces), book clear events, and, depending on the venue and dataset, other special order events. It is often called "L3 data".Fields (mbo)
Field
Type
Description
ts_recv
uint64_t
The capture-server-received timestamp expressed as the number of nanoseconds since the UNIX epoch. See ts_recv.
ts_event
uint64_t
The matching-engine-received timestamp expressed as the number of nanoseconds since the UNIX epoch. See ts_event.
rtype
uint8_t
A sentinel value indicating the record type. Always 160 in the MBO schema. See Rtype.
publisher_id
uint16_t
The publisher ID assigned by Databento, which denotes the dataset and venue. See Publishers.
instrument_id
uint32_t
The numeric instrument ID. See Instrument identifiers.
action
char
The event action. Can be Add, Cancel, Modify, cleaR book, Trade, Fill, or None. See Action.
side
char
The side that initiates the event. Can be Ask for a sell order (or sell aggressor in a trade), Bid for a buy order (or buy aggressor in a trade), or None where no side is specified. See Side.
price
int64_t
The order price where every 1 unit corresponds to 1e-9, i.e. 1/1,000,000,000 or 0.000000001. See Prices.
size
uint32_t
The order quantity.
channel_id
uint8_t
The channel ID assigned by Databento as an incrementing integer starting at zero.
order_id
uint64_t
The order ID assigned by the venue.
flags
uint8_t
A bit field indicating event end, message characteristics, and data quality. See Flags.
ts_in_delta
int32_t
The matching-engine-sending timestamp expressed as the number of nanoseconds before ts_recv. See ts_in_delta.
sequence
uint32_t
The message sequence number assigned at the venue.
SnapshotsFor the convenience of managing state and recovery, Databento provides a synthetic snapshot of the order book at the start of each UTC day in our historical MBO data and periodic book snapshots in our real-time MBO data.
The mechanics of these snapshots is detailed here.See alsoLearn more about the different action types and how to manage order state with respect to each action from our State management of resting orders tutorial.Also learn how to construct a limit order book from MBO data from our limit order book construction tutorial.MBO data normalization differs slightly from one venue or dataset to another.
Edge cases and differences are documented separately for each venue in the Venues and datasets section.Market by price (MBP-10)MBP-10 (market by price) provides every order book event across the top ten price levels, keyed by price. This includes every trade and changes to aggregate market depth, alongside total size and order count at the top ten price levels.This is often called "L2 data".Fields (mbp-10)
Field
Type
Description
ts_recv
uint64_t
The capture-server-received timestamp expressed as the number of nanoseconds since the UNIX epoch. See ts_recv.
ts_event
uint64_t
The matching-engine-received timestamp expressed as the number of nanoseconds since the UNIX epoch. See ts_event.
rtype
uint8_t
A sentinel value indicating the record type. Always 10 in the MBP-10 schema. See Rtype.
publisher_id
uint16_t
The publisher ID assigned by Databento, which denotes the dataset and venue. See Publishers.
instrument_id
uint32_t
The numeric instrument ID. See Instrument identifiers.
action
char
The event action. Can be Add, Cancel, Modify, cleaR book, or Trade. See Action.
side
char
The side that initiates the event. Can be Ask for a sell order (or sell aggressor in a trade), Bid for a buy order (or buy aggressor in a trade), or None where no side is specified. See Side.
depth
uint8_t
The book level where the update event occurred.
price
int64_t
The order price where every 1 unit corresponds to 1e-9, i.e. 1/1,000,000,000 or 0.000000001. See Prices.
size
uint32_t
The order quantity.
flags
uint8_t
A bit field indicating event end, message characteristics, and data quality. See Flags.
ts_in_delta
int32_t
The matching-engine-sending timestamp expressed as the number of nanoseconds before ts_recv. See ts_in_delta.
sequence
uint32_t
The message sequence number assigned at the venue.
bid_px_N
int64_t
The bid price at level N (top level if N = 00) where every 1 unit corresponds to 1e-9, i.e. 1/1,000,000,000 or 0.000000001. See Prices.
ask_px_N
int64_t
The ask price at level N (top level if N = 00) where every 1 unit corresponds to 1e-9, i.e. 1/1,000,000,000 or 0.000000001. See Prices.
bid_sz_N
uint32_t
The bid size at level N (top level if N = 00).
ask_sz_N
uint32_t
The ask size at level N (top level if N = 00).
bid_ct_N
uint32_t
The bid order count at level N (top level if N = 00).
ask_ct_N
uint32_t
The ask order count at level N (top level if N = 00).
Implementation differences between clients and encodingsBid and ask depth messages (fields starting with bid_ and ask_) are structured differently in the C++ and Rust clients, the Python record interface, and JSON data. Instead of using the _N suffix, they're stored in an array of structures named levels, with the top-of-book at index 0.For example, in C++, levels[5].bid_px corresponds to bid_px_05 in the Python DataFrame API and CSV format.See alsoIt is possible to construct MBP-10 yourself from MBO data if you want more price levels or prefer to reduce your bandwidth use. Learn how to construct a limit order book from MBO data from our limit order book construction tutorial.Market by price (MBP-1)MBP-1 (market by price) provides every order book event that updates the top price level, also known as the best bid and offer (BBO). This includes every trade and changes to book depth, alongside total size and order count at the BBO.This is often called "L1 data".Fields (mbp-1)
Field
Type
Description
ts_recv
uint64_t
The capture-server-received timestamp expressed as the number of nanoseconds since the UNIX epoch. See ts_recv.
ts_event
uint64_t
The matching-engine-received timestamp expressed as the number of nanoseconds since the UNIX epoch. See ts_event.
rtype
uint8_t
A sentinel value indicating the record type. Always 1 in the MBP-1 schema. See Rtype.
publisher_id
uint16_t
The publisher ID assigned by Databento, which denotes the dataset and venue. See Publishers.
instrument_id
uint32_t
The numeric instrument ID. See Instrument identifiers.
action
char
The event action. Can be Add, Cancel, Modify, cleaR book, or Trade. See Action.
side
char
The side that initiates the event. Can be Ask for a sell order (or sell aggressor in a trade), Bid for a buy order (or buy aggressor in a trade), or None where no side is specified. See Side.
depth
uint8_t
The book level where the update event occurred.
price
int64_t
The order price where every 1 unit corresponds to 1e-9, i.e. 1/1,000,000,000 or 0.000000001. See Prices.
size
uint32_t
The order quantity.
flags
uint8_t
A bit field indicating event end, message characteristics, and data quality. See Flags.
ts_in_delta
int32_t
The matching-engine-sending timestamp expressed as the number of nanoseconds before ts_recv. See ts_in_delta.
sequence
uint32_t
The message sequence number assigned at the venue.
bid_px_00
int64_t
The bid price at the top level where every 1 unit corresponds to 1e-9, i.e. 1/1,000,000,000 or 0.000000001. See Prices.
ask_px_00
int64_t
The ask price at the top level where every 1 unit corresponds to 1e-9, i.e. 1/1,000,000,000 or 0.000000001. See Prices.
bid_sz_00
uint32_t
The bid size at the top level.
ask_sz_00
uint32_t
The ask size at the top level.
bid_ct_00
uint32_t
The bid order count at the top level.
ask_ct_00
uint32_t
The ask order count at the top level.
See alsoSome venues or data feeds may publish two-sided BBO changes in a single update. In cases like this where the side is indeterminate, we'll also use the side code N. Exceptions and edge cases like this can be found in our Venues and datasets section.Implementation differences between clients and encodingsBid and ask depth messages (fields starting with bid_ and ask_) are structured differently in the C++ and Rust clients, the Python record interface, and JSON data. Instead of using the _N suffix, they're stored in an array of structures named levels, with the top-of-book at index 0.For example, in C++, levels[5].bid_px corresponds to bid_px_05 in the Python DataFrame API and CSV format.See alsoMBP-1 has many similarities to the TBBO and BBO schemas. The main distinction is that MBP-1 is in book update space, while TBBO is in trade space, and BBO is in time space. Learn about the differences between each in our MBP-1 vs. TBBO vs. BBO schemas guide.Consolidated market by price (CMBP-1)CMBP-1 (consolidated market by price) provides every order book event that updates the top price level across all venues in the dataset, also known as the consolidated best bid and offer (CBBO). This includes every trade and changes to book depth, alongside total size and publisher attribution at the CBBO.This is often called "L1 data".Fields (cmbp-1)
Field
Type
Description
ts_recv
uint64_t
The capture-server-received timestamp expressed as the number of nanoseconds since the UNIX epoch. See ts_recv.
ts_event
uint64_t
The matching-engine-received timestamp expressed as the number of nanoseconds since the UNIX epoch. See ts_event.
rtype
uint8_t
A sentinel value indicating the record type. Always 177 in the CMBP-1 schema. See Rtype.
publisher_id
uint16_t
The publisher ID assigned by Databento, which denotes the dataset and venue. See Publishers.
instrument_id
uint32_t
The numeric instrument ID. See Instrument identifiers.
action
char
The event action. Can be Add, Cancel, Modify, cleaR book, or Trade. See Action.
side
char
The side that initiates the event. Can be Ask for a sell order (or sell aggressor in a trade), Bid for a buy order (or buy aggressor in a trade), or None where no side is specified. See Side.
price
int64_t
The order price where every 1 unit corresponds to 1e-9, i.e. 1/1,000,000,000 or 0.000000001. See Prices.
size
uint32_t
The order quantity.
flags
uint8_t
A bit field indicating event end, message characteristics, and data quality. See Flags.
ts_in_delta
int32_t
The matching-engine-sending timestamp expressed as the number of nanoseconds before ts_recv. See ts_in_delta.
bid_px_00
int64_t
The bid price at the top level where every 1 unit corresponds to 1e-9, i.e. 1/1,000,000,000 or 0.000000001. See Prices.
ask_px_00
int64_t
The ask price at the top level where every 1 unit corresponds to 1e-9, i.e. 1/1,000,000,000 or 0.000000001. See Prices.
bid_sz_00
uint32_t
The bid size at the top level.
ask_sz_00
uint32_t
The ask size at the top level.
bid_pb_00
uint16_t
The publisher ID indicating the venue containing the best bid. See Publishers.
ask_pb_00
uint16_t
The publisher ID indicating the venue containing the best ask. See Publishers.
See alsoSome venues or data feeds may publish two-sided CBBO changes in a single update. In cases like this where the side is indeterminate, we'll also use the side code N. Exceptions and edge cases like this can be found in our Venues and datasets section.CMBP-1 publisherThe value used to populate the publisher_id field will vary depending on the action.
For Trades, publisher_id will correspond to the venue the trade executed on.
For all other actions, publisher_id will be the consolidated publisher ID for the dataset.In all scenarios, bid_pb_00 and ask_pb_00 will represent the venues showing the NBBO.Implementation differences between clients and encodingsBid and ask depth messages (fields starting with bid_ and ask_) are structured differently in the C++ and Rust clients, the Python record interface, and JSON data. Instead of using the _N suffix, they're stored in an array of structures named levels, with the top-of-book at index 0.For example, in C++, levels[5].bid_px corresponds to bid_px_05 in the Python DataFrame API and CSV format.See alsoCMBP-1 has many similarities to the TCBBO and CBBO schemas. The main distinction is that CMBP-1 is in book update space, while TCBBO is in trade space, and CBBO is in time space. Learn about the differences between each in our CMBP-1 vs. TCBBO vs. CBBO schemas guide.BBO on trade (TBBO)BBO on trade (TBBO) provides every trade event alongside the BBO immediately before the effect of each trade. This is a subset of MBP-1.Fields (tbbo)
Field
Type
Description
ts_recv
uint64_t
The capture-server-received timestamp expressed as the number of nanoseconds since the UNIX epoch. See ts_recv.
ts_event
uint64_t
The matching-engine-received timestamp expressed as the number of nanoseconds since the UNIX epoch. See ts_event.
rtype
uint8_t
A sentinel value indicating the record type. Always 1 in the TBBO schema. See Rtype.
publisher_id
uint16_t
The publisher ID assigned by Databento, which denotes the dataset and venue. See Publishers.
instrument_id
uint32_t
The numeric instrument ID. See Instrument identifiers.
action
char
The event action. Always Trade in the TBBO schema. See Action.
side
char
The side that initiates the trade. Can be Ask for a sell aggressor in a trade, Bid for a buy aggressor in a trade, or None where no side is specified. See Side.
depth
uint8_t
The book level where the update event occurred.
price
int64_t
The order price where every 1 unit corresponds to 1e-9, i.e. 1/1,000,000,000 or 0.000000001. See Prices.
size
uint32_t
The order quantity.
flags
uint8_t
A bit field indicating event end, message characteristics, and data quality. See Flags.
ts_in_delta
int32_t
The matching-engine-sending timestamp expressed as the number of nanoseconds before ts_recv. See ts_in_delta.
sequence
uint32_t
The message sequence number assigned at the venue.
bid_px_00
int64_t
The bid price at the top level where every 1 unit corresponds to 1e-9, i.e. 1/1,000,000,000 or 0.000000001. See Prices.
ask_px_00
int64_t
The ask price at the top level where every 1 unit corresponds to 1e-9, i.e. 1/1,000,000,000 or 0.000000001. See Prices.
bid_sz_00
uint32_t
The bid size at the top level.
ask_sz_00
uint32_t
The ask size at the top level.
bid_ct_00
uint32_t
The bid order count at the top level.
ask_ct_00
uint32_t
The ask order count at the top level.
Implementation differences between clients and encodingsBid and ask depth messages (fields starting with bid_ and ask_) are structured differently in the C++ and Rust clients, the Python record interface, and JSON data. Instead of using the _N suffix, they're stored in an array of structures named levels, with the top-of-book at index 0.For example, in C++, levels[5].bid_px corresponds to bid_px_05 in the Python DataFrame API and CSV format.See alsoTBBO has many similarities to the MBP-1 and BBO schemas. The main distinction is that TBBO is in trade space, while MBP-1 is in book update space, and BBO is in time space. In particular, the action type of TBBO is always Trade. Learn about the differences between each in our MBP-1 vs. TBBO vs. BBO schemas guide.Consolidated BBO on trade (TCBBO)Consolidated BBO on trade (TCBBO) provides every trade event alongside the consolidated BBO immediately before the effect of each trade. This is a subset of CMBP-1.Fields (tcbbo)
Field
Type
Description
ts_recv
uint64_t
The capture-server-received timestamp expressed as the number of nanoseconds since the UNIX epoch. See ts_recv.
ts_event
uint64_t
The matching-engine-received timestamp expressed as the number of nanoseconds since the UNIX epoch. See ts_event.
rtype
uint8_t
A sentinel value indicating the record type. Always 194 in the TCBBO schema. See Rtype.
publisher_id
uint16_t
The publisher ID assigned by Databento, which denotes the dataset and venue. See Publishers.
instrument_id
uint32_t
The numeric instrument ID. See Instrument identifiers.
action
char
The event action. Always Trade in the TCBBO schema. See Action.
side
char
The side that initiates the event. Can be Ask for a sell aggressor in a trade, Bid for a buy aggressor in a trade, or None where no side is specified. See Side.
price
int64_t
The order price where every 1 unit corresponds to 1e-9, i.e. 1/1,000,000,000 or 0.000000001. See Prices.
size
uint32_t
The order quantity.
flags
uint8_t
A bit field indicating event end, message characteristics, and data quality. See Flags.
ts_in_delta
int32_t
The matching-engine-sending timestamp expressed as the number of nanoseconds before ts_recv. See ts_in_delta.
bid_px_00
int64_t
The bid price at the top level where every 1 unit corresponds to 1e-9, i.e. 1/1,000,000,000 or 0.000000001. See Prices.
ask_px_00
int64_t
The ask price at the top level where every 1 unit corresponds to 1e-9, i.e. 1/1,000,000,000 or 0.000000001. See Prices.
bid_sz_00
uint32_t
The bid size at the top level.
ask_sz_00
uint32_t
The ask size at the top level.
bid_pb_00
uint16_t
The publisher ID indicating the venue containing the best bid. See Publishers.
ask_pb_00
uint16_t
The publisher ID indicating the venue containing the best ask. See Publishers.
TCBBO publisherThe publisher_id field will correspond to the venue the trade executed on.bid_pb_00 and ask_pb_00 will represent the individual venues showing the NBBO.Implementation differences between clients and encodingsBid and ask depth messages (fields starting with bid_ and ask_) are structured differently in the C++ and Rust clients, the Python record interface, and JSON data. Instead of using the _N suffix, they're stored in an array of structures named levels, with the top-of-book at index 0.For example, in C++, levels[5].bid_px corresponds to bid_px_05 in the Python DataFrame API and CSV format.See alsoTCBBO has many similarities to the CMBP-1 and CBBO schemas. The main distinction is that TCBBO is in trade space, while CMBP-1 is in book update space, and CBBO is in time space. In particular, the action type of TBBO is always Trade. Learn about the differences between each in our CMBP-1 vs. TCBBO vs. CBBO schemas guide.BBO on interval (BBO)BBO on interval (BBO) provides the last best bid, best offer, and sale at 1-second or 1-minute intervals. This is a subset of MBP-1.Databento adopts the following convention for BBO:
The time interval is indicated by the schema ID's suffix: -1s for 1-second and -1m for 1-minute.
If no trade or BBO update occurs within the interval, no record is printed.
If a BBO update occurs but no trade takes place within the interval, the last sale information is forward-filled from the previous interval.
If no BBO update occurs but a trade takes place within the interval, the BBO information is forward-filled from the previous interval.
Fields (bbo-1s and bbo-1m)
Field
Type
Description
ts_recv
uint64_t
The end timestamp of the interval, clamped to the second/minute boundary, expressed as the number of nanoseconds since the UNIX epoch.
ts_event
uint64_t
The matching-engine-received timestamp of the last trade for the instrument expressed as the number of nanoseconds since the UNIX epoch. Will be UNDEF_TIMESTAMP in cases where there was no last trade in the session. See ts_event.
rtype
uint8_t
A sentinel value indicating the record type. Can be either 195 (BBO-1s) or 196 (BBO-1m). See Rtype.
publisher_id
uint16_t
The publisher ID assigned by Databento, which denotes the dataset and venue. See Publishers.
instrument_id
uint32_t
The numeric instrument ID. See Instrument identifiers.
side
char
The side that initiated the last trade. Can be Ask for a sell aggressor in a trade, Bid for a buy aggressor in a trade, or None where no side is specified. See Side.
price
int64_t
The last trade price where every 1 unit corresponds to 1e-9, i.e. 1/1,000,000,000 or 0.000000001. Will be UNDEF_PRICE if there was no last trade in the session. See Prices.
size
uint32_t
The last trade quantity.
flags
uint8_t
A bit field indicating event end, message characteristics, and data quality. See Flags.
sequence
uint32_t
The message sequence number assigned at the venue of the last update.
bid_px_00
int64_t
The bid price at the top level where every 1 unit corresponds to 1e-9, i.e. 1/1,000,000,000 or 0.000000001. See Prices.
ask_px_00
int64_t
The ask price at the top level where every 1 unit corresponds to 1e-9, i.e. 1/1,000,000,000 or 0.000000001. See Prices.
bid_sz_00
uint32_t
The bid size at the top level.
ask_sz_00
uint32_t
The ask size at the top level.
bid_ct_00
uint32_t
The bid order count at the top level.
ask_ct_00
uint32_t
The ask order count at the top level.
Consolidated BBO on interval (CBBO)Consolidated BBO on interval (CBBO) provides the consolidated last best bid, best offer, and sale at 1-second or 1-minute intervals. This is a subset of CMBP-1.Databento adopts the following convention for CBBO:
The time interval is indicated by the schema ID's suffix: -1s for 1-second and -1m for 1-minute.
If no trade or CBBO update occurs within the interval, no record is printed.
If a CBBO update occurs but no trade takes place within the interval, the last sale information is forward-filled from the previous interval.
If no CBBO update occurs but a trade takes place within the interval, the CBBO information is forward-filled from the previous interval.
Fields (cbbo-1s and cbbo-1m)
Field
Type
Description
ts_recv
uint64_t
The end timestamp of the interval, clamped to the second/minute boundary.
ts_event
uint64_t
The matching-engine-received timestamp of the last trade for the instrument expressed as the number of nanoseconds since the UNIX epoch. Will be UNDEF_TIMESTAMP in cases where there was no last trade in the session. See ts_event.
rtype
uint8_t
A sentinel value indicating the record type. Can be either 192 (CBBO-1s) or 193 (CBBO-1m). See Rtype.
publisher_id
uint16_t
The publisher ID assigned by Databento, which denotes the dataset and venue. See Publishers.
instrument_id
uint32_t
The numeric instrument ID. See Instrument identifiers.
side
char
The side that initiated the last trade. Can be Ask for a sell aggressor in a trade, Bid for a buy aggressor in a trade, or None where no side is specified. See Side.
price
int64_t
The last trade price where every 1 unit corresponds to 1e-9, i.e. 1/1,000,000,000 or 0.000000001.
size
uint32_t
The last trade quantity.
flags
uint8_t
A bit field indicating event end, message characteristics, and data quality. See Flags.
bid_px_00
int64_t
The bid price at the top level where every 1 unit corresponds to 1e-9, i.e. 1/1,000,000,000 or 0.000000001. See Prices.
ask_px_00
int64_t
The ask price at the top level where every 1 unit corresponds to 1e-9, i.e. 1/1,000,000,000 or 0.000000001. See Prices.
bid_sz_00
uint32_t
The bid size at the top level.
ask_sz_00
uint32_t
The ask size at the top level.
bid_pb_00
uint16_t
The publisher ID indicating the venue containing the best bid. See Publishers.
ask_pb_00
uint16_t
The publisher ID indicating the venue containing the best ask. See Publishers.
CBBO publisherThe publisher_id field will always be the consolidated publisher ID for the dataset.bid_pb_00 and ask_pb_00 will represent the individual venues showing the NBBO at the end of the interval.Implementation differences between clients and encodingsBid and ask depth messages (fields starting with bid_ and ask_) are structured differently in the C++ and Rust clients, the Python record interface, and JSON data. Instead of using the _N suffix, they're stored in an array of structures named levels, with the top-of-book at index 0.For example, in C++, levels[5].bid_px corresponds to bid_px_05 in the Python DataFrame API and CSV format.See alsoCBBO has many similarities to the CMBP-1 and TCBBO schemas. The main distinction is that CBBO is in time space, while CMBP-1 is in book update space, and TCBBO is in trade space. Learn about the differences between each in our CMBP-1 vs. TCBBO vs. CBBO schemas guide.TradesTrades provides every trade event. This is a subset of MBO.This is often referred to as "time and sales", "last sale," or "tick data."Fields (trades)
Field
Type
Description
ts_recv
uint64_t
The capture-server-received timestamp expressed as the number of nanoseconds since the UNIX epoch. See ts_recv.
ts_event
uint64_t
The matching-engine-received timestamp expressed as the number of nanoseconds since the UNIX epoch. See ts_event.
rtype
uint8_t
A sentinel value indicating the record type. Always 0 in the trades schema. See Rtype.
publisher_id
uint16_t
The publisher ID assigned by Databento, which denotes the dataset and venue. See Publishers.
instrument_id
uint32_t
The numeric instrument ID. See Instrument identifiers.
action
char
The event action. Always Trade in the trades schema. See Action.
side
char
The side that initiates the trade. Can be Ask for a sell aggressor in a trade, Bid for a buy aggressor in a trade, or None where no side is specified. See Side.
depth
uint8_t
The book level where the update event occurred.
price
int64_t
The order price where every 1 unit corresponds to 1e-9, i.e. 1/1,000,000,000 or 0.000000001. See Prices.
size
uint32_t
The order quantity.
flags
uint8_t
A bit field indicating event end, message characteristics, and data quality. See Flags.
ts_in_delta
int32_t
The matching-engine-sending timestamp expressed as the number of nanoseconds before ts_recv. See ts_in_delta.
sequence
uint32_t
The message sequence number assigned at the venue.
Aggregate bars (OHLCV)Aggregate bars (OHLCV) provide open, high, low, and close prices and total volume aggregated from trades at 1-second, 1-minute, 1-hour, or 1-day intervals.Databento adopts the following convention for OHLCV:
The time interval is indicated by the schema ID's suffix: -1s for 1-second, -1m for 1-minute, -1h for 1-hour, and -1d for 1-day.
The ts_event timestamp marks the start of each interval.
If no trade occurs within the interval, no record is printed.
Fields (ohlcv-1s, ohlcv-1m, ohlcv-1h, ohlcv-1d)
Field
Type
Description
ts_event
uint64_t
The inclusive start time of the bar aggregation period based on the ts_recv from trade messages expressed as the number of nanoseconds since the UNIX epoch.
rtype
uint8_t
A sentinel value indicating the record type. Can be 32 (OHLCV-1s), 33 (OHLCV-1m), 34 (OHLCV-1h), or 35 (OHLCV-1d). See Rtype.
publisher_id
uint16_t
The publisher ID assigned by Databento, which denotes the dataset and venue. See Publishers.
instrument_id
uint32_t
The numeric instrument ID. See Instrument identifiers.
open
int64_t
The open price for the bar where every 1 unit corresponds to 1e-9, i.e. 1/1,000,000,000 or 0.000000001. See Prices.
high
int64_t
The high price for the bar where every 1 unit corresponds to 1e-9, i.e. 1/1,000,000,000 or 0.000000001. See Prices.
int64_t
The low price for the bar where every 1 unit corresponds to 1e-9, i.e. 1/1,000,000,000 or 0.000000001. See Prices.
close
int64_t
The close price for the bar where every 1 unit corresponds to 1e-9, i.e. 1/1,000,000,000 or 0.000000001. See Prices.
volume
uint64_t
The total volume traded during the aggregation period.
Other sampling intervalsIf you need other sampling intervals, we recommend that you construct OHLCV aggregates from trades data or subsample the OHLCV schema with the
nearest resolution on client side. For example, if you need 5-minute OHLCV aggregates, you can subsample this from ohlcv-1m.Best practicesIt's recommended that you construct OHLCV aggregates yourself from trades data if your application can handle the larger volume of data.
There will always be slight implementation differences in how a vendor constructs their OHLCV aggregates. These differences include how trade
conditions and retroactive trade breaks are handled, which timestamp is used for the event, and how precisely a vendor closes or publishes
the aggregate bar after the end of the interval. Daily OHLCV aggregates may also differ by whether best bid or offer prices are used to
compute the highs and lows, and whether the volumes should include block trades.Constructing OHLCV aggregates yourself ensures additional transparency into how the aggregates are computed and consistency within your
data.See alsoohlcv-1d is based entirely on prices and volumes from the electronic trading session and will be consistent with prices and volumes
observed from aggregating our trades data. However, this may differ from official settlement prices and volumes published by the venue,
which could include block trades, OTC transactions, and other effects. For official settlement data and more details about this, see
our statistics schema.Instrument definitionsInstrument definitions provide point-in-time reference information about each instrument, which includes properties like symbol, instrument name, expiration date, listing date, tick size, and strike price.Fields (definition)
Field
Type
Description
ts_recv
uint64_t
The capture-server-received timestamp expressed as the number of nanoseconds since the UNIX epoch.
ts_event
uint64_t
The matching-engine-received timestamp expressed as the number of nanoseconds since the UNIX epoch.
rtype
uint8_t
A sentinel value indicating the record type. Always 19 in the definition schema. See Rtype.
publisher_id
uint16_t
The publisher ID assigned by Databento, which denotes the dataset and venue.
instrument_id
uint32_t
The numeric instrument ID.
raw_symbol
char[symbol_cstr_len]
The instrument name (symbol) provided by the publisher, where symbol_cstr_len is specified in the Metadata.
security_update_action
char
Indicates if the instrument definition has been Added, Modified, or Deleted.
instrument_class
char
The classification of the instrument. See Instrument class.
min_price_increment
int64_t
The minimum constant tick for the instrument in units of 1e-9, i.e. 1/1,000,000,000 or 0.000000001.
display_factor
int64_t
The multiplier to convert the venueâs display price to the conventional price in units of 1e-9, i.e. 1/1,000,000,000 or 0.000000001.
expiration
uint64_t
The last eligible trade time expressed as a number of nanoseconds since the UNIX epoch. May only have date precision depending on the publisher.
activation
uint64_t
The time of instrument activation expressed as a number of nanoseconds since the UNIX epoch. May only have date precision depending on the publisher.
high_limit_price
int64_t
The allowable high limit price for the trading day in units of 1e-9, i.e. 1/1,000,000,000 or 0.000000001.
low_limit_price
int64_t
The allowable low limit price for the trading day in units of 1e-9, i.e. 1/1,000,000,000 or 0.000000001.
max_price_variation
int64_t
The differential value for price banding in units of 1e-9, i.e. 1/1,000,000,000 or 0.000000001.
unit_of_measure_qty
int64_t
The contract size for each instrument, in combination with unit_of_measure, in units of 1e-9, i.e. 1/1,000,000,000 or 0.000000001.
min_price_increment_amount
int64_t
The value currently under development by the venue. Converted to units of 1e-9, i.e. 1/1,000,000,000 or 0.000000001.
price_ratio
int64_t
The value used for price calculation in spread and leg pricing in units of 1e-9, i.e. 1/1,000,000,000 or 0.000000001.
inst_attrib_value
int32_t
A bitmap of instrument eligibility attributes.
underlying_id
uint32_t
The instrument_id of the first underlying instrument.
raw_instrument_id
uint64_t
The instrument ID assigned by the publisher. May be the same as instrument_id.
market_depth_implied
int32_t
The implied book depth on the price level data feed.
market_depth
int32_t
The (outright) book depth on the price level data feed.
market_segment_id
uint32_t
The market segment of the instrument.
max_trade_vol
uint32_t
The maximum trading volume for the instrument.
min_lot_size
int32_t
The minimum order entry quantity for the instrument.
min_lot_size_block
int32_t
The minimum quantity required for a block trade of the instrument.
min_lot_size_round_lot
int32_t
The minimum quantity required for a round lot of the instrument. Multiples of this quantity are also round lots.
min_trade_vol
uint32_t
The minimum trading volume for the instrument.
contract_multiplier
int32_t
The number of deliverables per instrument, i.e. peak days.
decay_quantity
int32_t
The quantity that a contract will decay daily, after decay_start_date has been reached.
original_contract_size
int32_t
The fixed contract value assigned to each instrument.
appl_id
int16_t
The channel ID assigned at the venue.
maturity_year
uint16_t
The calendar year reflected in the instrument symbol.
decay_start_date
uint16_t
The date at which a contract will begin to decay.
channel_id
uint16_t
The channel ID assigned by Databento as an incrementing integer starting at zero.
currency
char[4]
The currency used for price fields.
settl_currency
char[4]
The currency used for settlement, if different from currency.
secsubtype
char[6]
The strategy type of the spread.
group
char[21]
The security group code of the instrument.
exchange
char[5]
The exchange used to identify the instrument.
asset
char[11]
The underlying asset code (product code) of the instrument.
char[7]
The ISO standard instrument categorization code.
security_type
char[7]
The type of the instrument, e.g. FUT for future or future spread.
unit_of_measure
char[31]
The unit of measure for the instrumentâs original contract size, e.g. USD or LBS.
underlying
char[21]
The symbol of the first underlying instrument.
strike_price_currency
char[4]
The currency used for strike_price.
strike_price
int64_t
The exercise price if the instrument is an option. Converted to units of 1e-9, i.e. 1/1,000,000,000 or 0.000000001.
match_algorithm
char
The matching algorithm used for the instrument, typically FIFO. See Matching algorithm.
main_fraction
uint8_t
The price denominator of the main fraction.
price_display_format
uint8_t
The number of digits to the right of the tick mark, to display fractional prices.
sub_fraction
uint8_t
The price denominator of the sub fraction.
underlying_product
uint8_t
The product complex of the instrument.
maturity_month
uint8_t
The calendar month reflected in the instrument symbol.
maturity_day
uint8_t
The calendar day reflected in the instrument symbol, or 0.
maturity_week
uint8_t
The calendar week reflected in the instrument symbol, or 0.
user_defined_instrument
char
Indicates if the instrument is user defined: Yes or No.
contract_multiplier_unit
int8_t
The type of contract_multiplier. Either 1 for hours, or 2 for days.
flow_schedule_type
int8_t
The schedule for delivering electricity.
tick_rule
uint8_t
The tick rule of the spread.
leg_count
uint16_t
The number of legs in the strategy or spread. Will be 0 for outrights.
leg_index
uint16_t
The 0-based index of the leg (if any).
leg_instrument_id
uint32_t
The numeric ID assigned to the leg instrument.
leg_raw_symbol
char[symbol_cstr_len]
The leg instrument's raw symbol assigned by the publisher, where symbol_cstr_len is specified in the Metadata.
leg_instrument_class
char
The leg instrument's classification. See Instrument class.
leg_side
char
The side taken for the leg when buying the spread or strategy.
leg_price
int64_t
The tied price (if any) of the leg. Used for hedged strategies.
leg_delta
int64_t
The associated delta (if any) of the leg. Used for hedged strategies.
leg_ratio_price_numerator
int32_t
The numerator of the price ratio of the leg within the spread.
leg_ratio_price_denominator
int32_t
The denominator of the price ratio of the leg within the spread.
leg_ratio_qty_numerator
int32_t
The numerator of the quantity ratio of the leg within the spread.
leg_ratio_qty_denominator
int32_t
The denominator of the quantity ratio of the leg within the spread.
leg_underlying_id
uint32_t
The numeric ID of the leg instrument's underlying instrument.
Instrument classThe instrument_class field groups instruments into different classes of securities and derivatives.
Name
Value
Description
Bond
A bond.
Call
A call option.
Future
A future.
Stock
A stock.
Mixed spread
A spread with legs of multiple instrument classes.
A put option.
Future spread
A spread with future legs.
Option spread
A spread with options.
FX spot
A foreign exchange spot.
Commodity spot
A commodity being traded for immediate delivery.
Security typeThe security_type field classifies the type of instrument.
Name
Value
Description
Option on equity
An option on equity or a spread with options on equities.
Option on future
An option on future or a spread with options on futures.
Future
A future or a spread on futures.
Spreads
MLEG
A spread with legs of multiple instrument classes.
Interest rate swap
An interest rate swap security.
Matching algorithmThe matching_algorithm field defines the type of matching algorithm used for the instrument.
Name
Value
Description
Undefined
A matching algorithm was not specified.
FIFO
First-in-first-out matching.
Configurable
A configurable match algorithm.
Pro-Rata
Trade quantity is allocated to resting orders based on a pro-rata percentage: resting order quantity divided by total quantity.
FIFO with LMM
Like FIFO, but with LMM allocations prior to FIFO allocations.
Threshold Pro-Rata
Like Pro-Rata, but includes a configurable allocation to the first order that improves the market.
FIFO with Top Order and LMM
Like FIFO with LMM, but includes a configurable allocation to the first order that improves the market.
Threshold Pro-Rata with LMM
Like Threshold Pro-Rata, but includes a special priority to LMMs.
Eurodollar Futures
Special variant used only for Eurodollar futures on CME.
Time Pro-Rata
A commodity being traded for immediate delivery.
Institutional Prioritization
A two-pass FIFO algorithm. The first pass fills the Institutional Group the aggressing order is associated with. The second pass matches orders without an Institutional Group association.
Point-in-time instrument definitionsAn important distinction of Databento's instrument definition data is that we usually provide it in point-in-time format like the rest of our market data.In other words, the instrument definitions are timestamped to the nanosecond and treated as a time series, allowing you to simulate the sequence in which they arrived in real time. This is useful as it avoids lookahead and survivorship bias, and also allows you to backtest any strategy that trades instruments immediately as they become available intraday, such as new options strikes and new listings from IPOs.If you're switching to Databento from another data provider, you may find this behavior different, as many data providers only give you a cumulative list of all instruments or daily updates on instrument definitions.SnapshotsFor publishers that do not provide a full list of instrument definitions at least daily, the historical API provides a snapshot of all active definitions at UTC midnight Monday through Friday.
Therefore, any request for definitions for a 24-hour period beginning at UTC midnight is guaranteed to include definitions for all instruments active during that time period.Instrument definitions on time series endpoints vs. reference data endpointsDatabento also provides other forms of reference information and static data, such as corporate actions, cross-symbology mappings, and security master data. However, these additional forms of reference data may be found on API endpoints other than our time series endpoints.The reason that these are separated into different endpoints is that instrument definitions on our time series endpoints are those included with the primary source of data, which is usually a direct feed from a trading venue. On the other hand, other forms of reference data may originate from different secondary sources or need to be licensed separately from such direct feeds.Databento generally provides ways for you to join and merge instrument definitions and other forms of reference data.StrategiesOne definition record is created for each leg of a strategy or spread.
The primary fields will be the same for each of these records, while the fields beginning with leg_ will have information about the particular leg.ImbalanceImbalance provides auction imbalance data such as paired quantity, total quantity, and auction status.See alsoImbalance data normalization differs slightly from one venue or dataset to another.
Edge cases and differences are documented separately for each venue in the Venues and datasets section.Fields (imbalance)
Field
Type
Description
ts_recv
uint64_t
The capture-server-received timestamp expressed as the number of nanoseconds since the UNIX epoch. See ts_recv.
ts_event
uint64_t
The matching-engine-received timestamp expressed as the number of nanoseconds since the UNIX epoch. See ts_event.
rtype
uint8_t
A sentinel value indicating the record type. Always 20 in the imbalance schema. See Rtype.
publisher_id
uint16_t
The publisher ID assigned by Databento, which denotes the dataset and venue. See Publishers.
instrument_id
uint32_t
The numeric instrument ID. See Instrument identifiers.
ref_price
int64_t
The price at which the imbalance shares are calculated, where every 1 unit corresponds to 1e-9, i.e. 1/1,000,000,000 or 0.000000001. See Prices.
auction_time
uint64_t
Projected auction timestamp expressed as the number of nanoseconds since the UNIX epoch.
cont_book_clr_price
int64_t
The hypothetical auction-clearing price for both cross and continuous orders, where every 1 unit corresponds to 1e-9, i.e. 1/1,000,000,000 or 0.000000001. See Prices.
auct_interest_clr_price
int64_t
The hypothetical auction-clearing price for cross orders only, where every 1 unit corresponds to 1e-9, i.e. 1/1,000,000,000 or 0.000000001. See Prices.
ssr_filling_price
int64_t
The price at which Sell Short interest will be filed if a sell short restriction is in effect, where every 1 unit corresponds to 1e-9, i.e. 1/1,000,000,000 or 0.000000001. See Prices.
ind_match_price
int64_t
The price at which the highest number of shares would trade, subject to auction collars, where every 1 unit corresponds to 1e-9, i.e. 1/1,000,000,000 or 0.000000001. See Prices.
upper_collar
int64_t
Upper limit of the auction collar, where every 1 unit corresponds to 1e-9, i.e. 1/1,000,000,000 or 0.000000001. See Prices.
lower_collar
int64_t
Lower limit of the auction collar, where every 1 unit corresponds to 1e-9, i.e. 1/1,000,000,000 or 0.000000001. See Prices.
paired_qty
uint32_t
The quantity of shares that are eligible to be matched at ref_price.
total_imbalance_qty
uint32_t
The quantity of shares that are not paired at ref_price.
market_imbalance_qty
uint32_t
The total market order imbalance quantity at the ind_match_price.
unpaired_qty
uint32_t
During the Closing Auction, the number of unpaired shares priced at or better than the ref_price.
auction_type
char
Venue-specific character code indicating the auction type.
side
char
The market side of the total_imbalance_qty. Can be Ask, Bid, or None.
auction_status
uint8_t
Venue-specific status code. Refer to the dataset-specific documentation.
freeze_status
uint8_t
Venue-specific status code. Refer to the dataset-specific documentation.
num_extensions
uint8_t
The number of times the halt period has been extended.
unpaired_side
char
The side of the unpaired_qty. Reserved for future use
significant_imbalance
char
Venue-specific status code. Refer to the dataset-specific documentation.
StatisticsStatistics provides official summary statistics of each instrument that's published by the venue.
This generally includes properties like daily volume, open interest, preliminary and final settlement prices, and official open, high, and low prices.Fields (statistics)
Field
Type
Description
ts_recv
uint64_t
The capture-server-received timestamp expressed as the number of nanoseconds since the UNIX epoch. See ts_recv.
ts_event
uint64_t
The matching-engine-received timestamp expressed as the number of nanoseconds since the UNIX epoch. See ts_event.
rtype
uint8_t
A sentinel value indicating the record type. Always 24 in the statistics schema. See Rtype.
publisher_id
uint16_t
The publisher ID assigned by Databento, which denotes the dataset and venue. See Publishers.
instrument_id
uint32_t
The numeric instrument ID. See Instrument identifiers.
ts_ref
uint64_t
The reference timestamp expressed as the number of nanoseconds since the UNIX epoch.
price
int64_t
The value for price statistics where every 1 unit corresponds to 1e-9, i.e. 1/1,000,000,000 or 0.000000001. See Prices.
quantity
int64_t
The value for non-price statistics. Will be INT64_MAX when unused.
sequence
uint32_t
The message sequence number assigned at the venue.
ts_in_delta
int32_t
The matching-engine-sending timestamp expressed as the number of nanoseconds before ts_recv. See ts_in_delta.
stat_type
uint16_t
The type of statistic value contained in the message. See Types of statistics table below.
channel_id
uint16_t
The channel ID within the venue.
update_action
uint8_t
Indicates if the statistic is newly added (1) or deleted (2). (Deleted is only used with some stat_types)
stat_flags
uint8_t
Additional flags associated with certain stat types and datasets. Refer to the Venues and datasets section for details.
Some fields are not applicable depending on the type of statistic.
Null, invalid or inapplicable values are represented by the maximum value of the field's type. For example, null is represented by 2^64-1 for ts_event, which has an unsigned 64-bit integer type. In cases where the value is actually zero or null has the same meaning as zero, zero is used instead.Types of statistics
Type
stat_type
price
quantity
stat_flags
ts_ref
Description
Opening price
The price and quantity of the first trade of an instrument.
Indicative opening price
The probable price of the first trade of an instrument published during pre-open.
Settlement price
The settlement price of an instrument. Flags will indicate whether the price is final or preliminary and actual or theoretical.
Trading session low price
The lowest trade price of an instrument during the trading session.
Trading session high price
The highest trade price of an instrument during the trading session.
Cleared volume
The number of contracts cleared for an instrument on the previous trading date.
Lowest offer
The lowest offer price for an instrument during the trading session.
Highest bid
The highest bid price for an instrument during the trading session.
Open interest
The current number of outstanding contracts of an instrument.
Fixing price
The volume-weighted average price (VWAP) for a fixing period.
Close price
The last trade price and quantity during a trading session.
Net change
The change in price from the close price of the previous session to the most recent close price.
Volume-weighted average price
The volume-weighted average price (VWAP) during the trading session.
Volatility
The implied volatility associated with the settlement price.
Delta
The options delta associated with the settlement price.
Uncrossing price
The auction uncrossing price and quantity. This is used for auctions that are neither the official opening auction nor the official closing auction.
Types of statistics by publisherThe table below shows which statistics are available depending on dataset and publisher.
Type
CME Globex MDP 3.0
Cboe BZX Depth Pitch
Databento US Equities Summary
Nasdaq TotalView-ITCH
NYSE Arca Integrated
NYSE Integrated
OPRA
European Energy Exchange
Opening price
Indicative opening price
Settlement price
Trading session low price
Trading session high price
Cleared volume
Lowest offer
Highest bid
Open interest
Fixing price
Close price
Net change
Volume-weighted average price
Volatility
Delta
Uncrossing price
Official vs. Databento summary statisticsThe key distinction of the statistics schema is these are official summary statistics provided by the venueâDatabento doesn't compute these statistics.On most venues, Databento also provides separate OHLCV data that could be used in place of official open, high, low, and settlement prices, and volume from the statistics schema.These schemas are different and may vary for a few intentional reasons:
Often, official statistics have opaque methodology or are difficult to replicate because they're tallied by hand
Some venues include volumes and open interest from open outcry, auction, block trades, RFQs or other events that may not be disseminated in the electronic trading session or public feeds
Some venues double count volumes
The main purpose of Databento's summary data is that it provides more consistency: we derive it systematically from the tick data or full order book data during the electronic trading session and ensures consistency with our tick data; we publish at more deterministic times, and we normalize across venues using a UTC midnight cutoff universally. For electronic trading and research applications, this consistency may be more important, whereas for back office and administrative applications, official statistics may be preferable.StatusStatus provides updates about the trading session, such as halts, pauses, short-selling restrictions, auction start, and other matching engine statuses.
The granularity and frequency of these updates vary by publisher and dataset.Fields (status)
Field
Type
Description
ts_recv
uint64_t
The capture-server-received timestamp expressed as the number of nanoseconds since the UNIX epoch. See ts_recv.
ts_event
uint64_t
The matching-engine-received timestamp expressed as the number of nanoseconds since the UNIX epoch. See ts_event.
rtype
uint8_t
A sentinel value indicating the record type. Always 18 in the status schema. See Rtype.
publisher_id
uint16_t
The publisher ID assigned by Databento, which denotes the dataset and venue. See Publishers.
instrument_id
uint32_t
The numeric instrument ID. See Instrument identifiers.
action
uint16_t
The type of status change. See Types of status actions table below.
reason
uint16_t
Additional details about the cause of the status change. See Types of status reasons table below.
trading_event
uint16_t
Further information about the status change (if provided). See Types of trading events table below.
is_trading
char
The best-efforts state of trading in the instrument, either Y, N, or ~.
is_quoting
char
The best-efforts state of quoting in the instrument, either Y, N, or ~.
is_short_sell_restricted
char
The best-efforts state of short sell restrictions for the instrument (if applicable), either Y, N, or ~.
Status action variants
Variant
action
Description
None
No change.
Pre-open
The instrument is in a pre-open period.
Pre-cross
The instrument is in a pre-cross period.
Quoting
The instrument is quoting but not trading.
Cross
The instrument is in a cross/auction.
Rotation
The instrument is being opened through a trading rotation.
New price indication
A new price indication is available for the instrument.
Trading
The instrument is trading.
Halt
Trading in the instrument has been halted.
Pause
Trading in the instrument has been paused.
Suspend
Trading in the instrument has been suspended.
Pre-close
The instrument is in a pre-close period.
Close
Trading in the instrument has closed.
Post-close
The instrument is in a post-close period.
Short sell restriction (SSR) change
A change in short-selling restrictions.
Not available for trading
The instrument is not available for trading, either trading has closed or been halted.
Status reason variants
Variant
reason
Description
None
No reason given.
Scheduled
The change in status occurred as scheduled.
Surveillance intervention
The instrument stopped due to a market surveillance intervention.
Market event
The status changed due to activity in the market.
Instrument activation
The derivative instrument began trading.
Instrument expiration
The derivative instrument expired.
Recovery in process
Recovery in progress.
Regulatory
The status change was caused by a regulatory action.
Administrative
The status change was caused by an administrative action.
Non-compliance
The status change was caused by the issuer not being compliance with regulatory requirements.
Filings not current
Trading halted because the issuer's filings are not current.
SEC trading suspension
Trading halted due to an SEC trading suspension.
New issue
The status changed because a new issue is available.
Issue available
The status changed because an issue is available.
Issues reviewed
The status changed because the issue(s) were reviewed.
Filing requirements satisfied
The status changed because the filing requirements were satisfied.
News pending
Relevant news is pending.
News released
Relevant news was released.
News and resumption times
The news has been fully disseminated and times are available for the resumption in quoting and trading.
News not forthcoming
The relevant news was not forthcoming.
Order imbalance
Halted for order imbalance.
LULD pause
The instrument hit limit up or limit down.
Operational
An operational issue occurred with the venue.
Additional information requested
The status changed until the exchange receives additional information.
Merger effective
Trading halted due to merger becoming effective.
Trading is halted in an ETF due to conditions with the component securities.
Corporate action
Trading is halted for a corporate action.
New Security offering
Trading is halted because the instrument is a new offering.
Market wide halt level 1
Halted due to the market-wide circuit breaker level 1.
Market wide halt level 2
Halted due to the market-wide circuit breaker level 2.
Market wide halt level 3
Halted due to the market-wide circuit breaker level 3.
Market wide halt carryover
Halted due to the carryover of a market-wide circuit breaker from the previous trading day.
Market wide halt resumption
Resumption due to the end of a market-wide circuit breaker halt.
Quotation not available
Halted because quotation is not available.
Trading event variants
Variant
trading_event
Description
None
No additional information given.
No cancel
Order entry and modification are not allowed.
Change trading session
A change of trading session occurred. Daily statistics are reset.
Implied matching on
Implied matching is available.
Implied matching off
Implied matching is not available.
SnapshotsAs trading status can carry across UTC days, the historical API includes a snapshot of the last status record for each active instrument at UTC midnight.Corporate actionsCorporate actions includes coverage from 215+ exchanges worldwide, 300,000+ listed and delisted securities from 100,000+ companies, categorized as 60+ event types.
The dataset focuses on crucial events affecting global securities such as dividends, takeovers, mergers & acquisitions and rights issues.See alsoReference data enums for a lookup table of possible enumeration field values.Fields
Timestamps are strings in ISO 8601 format, expressed in UTC
Dates are strings in YYYY-MM-DD ISO 8601 format, expressed in the local time of the listing exchange
Enums are strings, with each value corresponding to a predefined set of options listed in the associated lookup table
Field
Type
Description
ts_record
Timestamp
The timestamp (UTC) the record last changed.
event_unique_id
String
Unique corporate actions record identifier. Can be used to deduplicate records for the same event.
event_id
String
Event identifier unique at the event level.
listing_id
String
Unique listing numerical ID. Concatenation of a sequence number and the listing_group_id. The sequence number will usually be 1 unless additional listings exists for the same security in the same market, usually as a result of secondary trading currencies.
listing_group_id
String
Groups all listings for the same security on a specific exchange, often in different trading currencies.
security_id
String
Security level numerical ID. Can be used to link all multiple listings together.
issuer_id
String
Issuer level numerical ID. Can be used to link all securities of a company together.
event_action
Enum
Record action status code. See ACTION enum.
event
Enum
Event type. The event_id where applicable links all payments rows of an event together to show all the payment options. Can be used as a short event name. See EVENT enum.
event_subtype
EnumÂ orÂ null
Event subtype. This is only used for a limited number of events where the event data supplied falls into distinct sub-groupings. See EVENTSUBTYPE enum.
event_date_label
String
The main calendar date name for the event.
event_date
Date
The primary date associated with the event, often marking when the event is scheduled to occur or take effect.
event_created_date
Date
The date on which the event was officially created or recorded in the system.
ex_date
DateÂ orÂ null
The ex-dividend date (ex-date), marking the first date on which the security trades without the entitlement to the upcoming dividend, distribution, or other corporate action benefit. Where the payment_type of a multiple payment event is flagged as a (B)oth, this ex-date field will contain the ex-date of the cash component. The ex_date2 field in the event_info section will carry the stock component ex-date.
effective_date
DateÂ orÂ null
The date on which the event becomes effective or is executed, signifying when the changes or actions are officially recognized.
record_date
DateÂ orÂ null
The date on which a company reviews its records to determine the eligible shareholders entitled to receive dividends or participate in the event. The record date is one business day after the ex-date.
record_date_id
DateÂ orÂ null
Record date ID. This ID links all events for the same security that share the same record date.
related_event
EnumÂ orÂ null
Related event type. See EVENT enum.
related_event_id
DateÂ orÂ null
Direct link to another event.
global_status
Enum
Global status code. Indicates the global listing activity status of a security. See GLOBSTATUS enum.
listing_status
Enum
Listing status code. Indicates the listing activity status at market level. See LISTSTAT enum.
listing_source
Enum
Indicates if the listing level data in the record is (M)ain or (S)econdary. See LISTSOURCE enum.
listing_date
DateÂ orÂ null
The date when the security is officially listed on the exchange and becomes available for trading.
delisting_date
DateÂ orÂ null
The date when the security is officially removed from the exchange and ceases to be traded.
issuer_name
String
The issuer name.
security_type
Enum
The security type. See SECTYPE enum.
security_description
String
The security description.
primary_exchange
EnumÂ orÂ null
Exchange code for the primary security. Empty if unknown. See EXCHANGE enum.
exchange
Enum
Exchange code for the listing. Equivalent to the MIC but more stable as MIC might not be available in a timely fashion. Also note that the MIC can change but the exchange will remain the same. See EXCHANGE enum.
operating_mic
EnumÂ orÂ null
Market Identifier Code (MIC) as an ISO 10383 string. See EXCHANGE enum.
symbol
StringÂ orÂ null
The query input symbol which matched the record.
nasdaq_symbol
StringÂ orÂ null
Nasdaq Integrated Platform Suffix convention symbol.
local_code
StringÂ orÂ null
Local code. Usually unique at market level but there are exceptions to this rule. Either an alpha string, or a number.
isin
StringÂ orÂ null
ISIN global level identifier as an ISO 6166 string.
us_code
StringÂ orÂ null
US domestic CUSIP.
bbg_comp_id
StringÂ orÂ null
Bloomberg composite global ID.
bbg_comp_ticker
StringÂ orÂ null
Bloomberg composite ticker.
figi
StringÂ orÂ null
Bloomberg FIGI, that is exchange level ID.
figi_ticker
StringÂ orÂ null
Bloomberg exchange level ticker.
listing_country
EnumÂ orÂ null
Listing country as two letter ISO 3166-1 alpha-2 string. See CNTRY enum.
register_country
EnumÂ orÂ null
Register country as two letter ISO 3166-1 alpha-2 string. See CNTRY enum.
trading_currency
EnumÂ orÂ null
Trading currency as an ISO 4217 string. See CUREN enum.
multi_currency
Boolean
True if there is currently more than one listing in the market, otherwise false.
segment_mic_name
StringÂ orÂ null
Market Segment Name. Used when no Segment MIC is available (Not the ISO 10383 MICSEG lookup name).
segment_mic
EnumÂ orÂ null
Market Identifier Code (MIC) as an ISO 10383 string. See MICSEG enum.
mand_volu_flag
Enum
Indicates mandatory and/or voluntary event participation requirement. With a few event types the flag change in the course of the corporate action lifecycle. See MANDVOLU enum.
rd_priority
NumberÂ orÂ null
The priority order number sequence where populated is necessary to correctly calculate resultant cash and stock outcomes.
lot_size
NumberÂ orÂ null
Lot Size. Indicates the minimum number of shares that can be acquired in one transaction.
par_value
NumberÂ orÂ null
Par value amount.
par_value_currency
EnumÂ orÂ null
Par value currency as an ISO 4217 string. See CUREN enum.
payment_date
DateÂ orÂ null
The date on which the dividend or payment is made to eligible shareholders. Where the payment_type of a multiple payment event is flagged as a (B)oth, this payment date field will contain the payment date of the cash component.
duebills_redemption_date
DateÂ orÂ null
Due bills redemption date.
from_date
DateÂ orÂ null
The earliest date from which a specific corporate action or event is valid, active, or can be exercised. This date marks the beginning of the relevant event or process, such as when shareholders can start participating in a buyback, conversion, or rights issue. Applicable to a wide range of events.
to_date
DateÂ orÂ null
The final date by which the specific corporate action or event is valid, active, or must be completed. This date marks the conclusion of the relevant event or process, after which the associated rights, entitlements, or obligations may expire. Applicable to a wide range of events.
registration_date
DateÂ orÂ null
Registration date.
start_date
DateÂ orÂ null
The date on which the specific corporate action or event begins or becomes effective. This marks the commencement of the event's active period, such as the start of a buyback program, the beginning of a class action period, or the initiation of an odd-lot offer. Applicable to events like Class Actions (CLSAC), Certificate of Exchange (CTX), Buyback (BB), Odd-Lot Offer (ODDLT), and Financial Transaction Tax (FTT).
end_date
DateÂ orÂ null
The final date by which the corporate action or event is valid, active, or must be completed. This marks the conclusion of the event's active period, such as the end of a buyback program, the closing of a class action period, or the deadline for participating in an odd-lot offer. Applicable to events like Class Actions (CLSAC), Certificate of Exchange (CTX), Buyback (BB), Odd-Lot Offer (ODDLT), and Financial Transaction Tax (FTT).
open_date
DateÂ orÂ null
The date when the corporate action or event opens for participation or becomes available to stakeholders. This marks the beginning of the active period during which actions like tender offers, purchase offers, or redemptions can be initiated. Applicable to events like Takeovers (TKOVR), Purchase Offers (PO), and Redemptions (REDEM).
close_date
DateÂ orÂ null
The final date by which participation in the corporate action or event must be completed. This marks the end of the active period for actions like tender offers, purchase offers, or redemptions. Applicable to events like Takeovers (TKOVR), Purchase Offers (PO), and Redemptions (REDEM).
start_subscription_date
DateÂ orÂ null
The date when the subscription period for the event begins.
end_subscription_date
DateÂ orÂ null
The date when the subscription period for the event ends.
option_election_date
DateÂ orÂ null
The deadline by which participants must choose or elect an option related to the event.
withdrawal_rights_from_date
DateÂ orÂ null
The date from which withdrawal rights become effective, allowing participants to retract their election or participation.
withdrawal_rights_to_date
DateÂ orÂ null
The final date by which participants can exercise their withdrawal rights, retracting their election or participation.
notification_date
DateÂ orÂ null
The date on which the event notification is issued or made public.
financial_year_end_date
DateÂ orÂ null
The closing date of the company's financial year.
exp_completion_date
DateÂ orÂ null
The anticipated date when the event or related transaction is expected to be completed.
payment_type
EnumÂ orÂ null
Payment type. See PAYTYPE enum.
option_id
StringÂ orÂ null
Option number of the event where applicable - options are ORs.
serial_id
StringÂ orÂ null
Serial number of the event where applicable - serials are ANDs.
default_option_flag
BooleanÂ orÂ null
Flag indicating the benefit the shareholder would receive by default in case of several options being offered to them. The default is not always announced.
rate_currency
EnumÂ orÂ null
Payment currency as an ISO 4217 string. See CUREN enum.
ratio_old
NumberÂ orÂ null
Ratio Denominator is the existing holding.
ratio_new
NumberÂ orÂ null
Ratio Numerator is the new holding (for FSPLT, DIV and BON events includes the existing holding).
fraction
EnumÂ orÂ null
Describes how fractions are handled in settlement calculations. See FRACTIONS enum.
outturn_style
EnumÂ orÂ null
Style of outturn security. See OUTTURNSTYLE enum.
outturn_security_type
EnumÂ orÂ null
Security asset type. See SECTYPE enum.
outturn_security_id
StringÂ orÂ null
Outturn security.
outturn_isin
StringÂ orÂ null
Outturn ISIN.
outturn_us_code
StringÂ orÂ null
Outturn CUSIP.
outturn_local_code
StringÂ orÂ null
Outturn local code.
outturn_bbg_comp_id
StringÂ orÂ null
Outturn Bloomberg composite ID.
outturn_bbg_comp_ticker
StringÂ orÂ null
Outturn Bloomberg composite ticker.
outturn_figi
StringÂ orÂ null
Outturn FIGI - Bloomberg exchange level ID.
outturn_figi_ticker
StringÂ orÂ null
Outturn FIGI Ticker - Bloomberg exchange level ticker.
min_offer_qty
NumberÂ orÂ null
The quantity range within which the shareholder can offer from their total holding in the event.
max_offer_qty
NumberÂ orÂ null
The quantity range within which the shareholder can offer from their total holding in the event.
min_qualify_qty
NumberÂ orÂ null
If the quantity held by shareholder is within this range then they qualify for taking part in the event.
max_qualify_qty
NumberÂ orÂ null
If the quantity held by shareholder is within this range then they qualify for taking part in the event.
min_accept_qty
NumberÂ orÂ null
The total quantity the company will accept from all the shareholders tendering their shares in the event for the event to be binding on the offeror.
max_accept_qty
NumberÂ orÂ null
The total quantity the company will accept from all the shareholders tendering their shares in the event for the event to be binding on the offeror.
tender_strike_price
NumberÂ orÂ null
If the event is via a tender process it is the cut off price at which all the bids are accepted.
tender_price_step
NumberÂ orÂ null
If the event is via a tender then there is a price step in which one can put in the bids. E.g. If the price step specified is 10p then one has to make bids in steps of 10p i.e. GBP 1.10, GBP 1.20, GBP 1.30.
option_expiry_time
StringÂ orÂ null
Option expiry time.
option_expiry_tz
StringÂ orÂ null
Option expiry time zone.
withdrawal_rights_flag
BooleanÂ orÂ null
Withdrawal rights flag.
withdrawal_rights_expiry_time
StringÂ orÂ null
Withdrawal rights expiry time.
withdrawal_rights_expiry_tz
StringÂ orÂ null
Withdrawal rights expiry time zone.
expiry_time
StringÂ orÂ null
Expiry time.
expiry_tz
StringÂ orÂ null
Expiry time zone.
date_info
JSON
Event specific date information.
rate_info
JSON
Event specific payment rate information.
event_info
JSON
Additional event specific information.
ts_created
Timestamp
The timestamp (UTC) the record was added by Databento.
IdentifiersIdentifiers for listing, security and issuer are grouped at the beginning of each record, which enables
clearer comparisons of where a single security is associated with many individual listings across
different exchanges. There is one primary_exchange for a security, and it may then be listed
on multiple secondary exchanges.Dynamic fieldsThe following dynamically-sized fields provide additional supplementary information as key-value pairs:
date_info. Date specific information related to the event
rate_info. Rate specific information related to the event
event_info. Additional supplementary event information
Info
The content of these dynamic fields is contingent on the type of event and its event_subtype,
allowing for flexible and detailed data representation.Adjustment factorsAdjustment factors covers worldwide corporate actions capital events, spanning multiple
currencies for the same event. Each record includes all necessary fields to identify the country,
security, event, and adjustment factor.See alsoReference data enums for a lookup table of possible enumeration field values.Fields
Timestamps are strings in ISO 8601 format, expressed in UTC
Dates are strings in YYYY-MM-DD ISO 8601 format, expressed in the local time of the listing exchange
Enums are strings, with each value corresponding to a predefined set of options listed in the associated lookup table
Field
Type
Description
security_id
String
Security level numerical ID. Can be used to link all multiple listings together.
event_id
String
Event identifier unique at the event level. Links to the corporate actions event_id.
event
Enum
Event type. See EVENT enum.
issuer_name
String
The issuer name (sourced from corporate action).
security_type
Enum
The security type. See SECTYPE enum.
primary_exchange
Enum
Exchange code for the primary security. See EXCHANGE enum.
exchange
EnumÂ orÂ null
Exchange code for the listing. Equivalent to the MIC but more stable as MIC might not be available in a timely fashion. Also note that the MIC can change but the exchange will remain the same. See EXCHANGE enum.
operating_mic
Enum
Market Identifier Code (MIC) as an ISO 10383 string. See EXCHANGE enum.
symbol
StringÂ orÂ null
The query input symbol which matched the record.
nasdaq_symbol
StringÂ orÂ null
Nasdaq Integrated Platform Suffix convention symbol.
local_code
StringÂ orÂ null
Local Code. Usually unique at market level but there are exceptions to this rule. Either an alpha string, or a number.
local_code_resulting
StringÂ orÂ null
Resultant local code when applicable/known.
isin
StringÂ orÂ null
ISIN global level identifier as an ISO 6166 string (sourced from corporate action).
isin_resulting
String
Resultant ISIN when applicable/known (sourced from corporate action).
us_code
StringÂ orÂ null
US domestic CUSIP (sourced from corporate action).
status
String
Adjustment status. Can be (A)pply, (R)escind, (P)ending.
ex_date
Date
Date from which the event is effective.
factor
Number
Adjustment factor to apply.
close
NumberÂ orÂ null
Closing price on the ex_date.
currency
EnumÂ orÂ null
Currency for the closing price as an ISO 4217 string. See CUREN enum.
sentiment
Number
Market sentiment - the market's reaction to the event. Simply the previous close divided by today's open. Only correct if factor calculation requires previous close.
reason
Number
Reason/type of event, used to distinguish between different event types. See Adjustment factors dataset guide.
gross_dividend
NumberÂ orÂ null
The amount of the dividend before any taxes or fees are deducted. This value represents the total dividend declared by the company.
dividend_currency
StringÂ orÂ null
The currency in which the dividend is paid as an ISO 4217 string. See CUREN enum.
frequency
StringÂ orÂ null
The frequency at which the dividend is paid. See FREQ enum lookup table.
option
Number
The choice or option number associated with the event, often used when shareholders are given multiple options for how they would like to receive the dividend or other corporate action benefit (either cash, or script). See option field description.
detail
String
A human-readable description of the event.
ts_created
Timestamp
The timestamp (UTC) the record was added by Databento.
Security masterSecurity master provides up-to-date (latest) or point-in-time (PIT) static information on securities across international markets for 860,000+ listed and delisted securities.
This provides a means for resolving securities attributes, identification, symbology and informational challenges efficiently.
Some common use cases for the security master include research, backtesting, compliance and report generation, risk management, and keeping portfolios current.See alsoReference data enums for a lookup table of possible enumeration field values.Fields
Timestamps are strings in ISO 8601 format, expressed in UTC
Dates are strings in YYYY-MM-DD ISO 8601 format, expressed in the local time of the listing exchange
Enums are strings, with each value corresponding to a predefined set of options listed in the associated lookup table
Field
Type
Description
ts_record
Timestamp
The timestamp (UTC) the record last changed.
ts_effective
Timestamp
The timestamp (UTC) the record details are effective from.
listing_id
String
Unique listing numerical ID. Concatenation of a sequence number and the listing_group_id. The sequence number will usually be 1 unless additional listings exists for the same security in the same market, usually as a result of secondary trading currencies.
listing_group_id
String
Groups all listings for the same security on a specific exchange, often in different trading currencies.
security_id
String
Security level numerical ID. Can be used to link all multiple listings together.
issuer_id
String
Issuer level numerical ID. Can be used to link all securities of a company together.
listing_status
Enum
Listing status code. Indicates the listing activity status at market level. See LISTSTAT enum.
listing_source
Enum
Indicates if the listing level data in the record is (M)ain or (S)econdary. See LISTSOURCE enum.
listing_created_date
Date
Listing creation date.
listing_date
DateÂ orÂ null
Listing date.
delisting_date
DateÂ orÂ null
Delisting date.
issuer_name
String
Issuer name.
security_type
Enum
The security type. See SECTYPE enum.
security_description
String
The security description.
primary_exchange
EnumÂ orÂ null
Exchange code for the primary security. Empty if unknown. See EXCHANGE enum.
exchange
Enum
Exchange code for the listing. Equivalent to the MIC but more stable as MIC might not be available in a timely fashion. Also note that the MIC can change but the exchange will remain the same. See EXCHANGE enum.
operating_mic
EnumÂ orÂ null
Market Identifier Code (MIC) as an ISO 10383 string. See EXCHANGE enum.
symbol
StringÂ orÂ null
The query input symbol which matched the record.
nasdaq_symbol
StringÂ orÂ null
Nasdaq Integrated Platform Suffix convention symbol.
local_code
StringÂ orÂ null
Local code, usually unique at market level but there are exceptions to this rule. Either an alpha string, or a number.
isin
StringÂ orÂ null
ISIN global level identifier as an ISO 6166 string.
us_code
StringÂ orÂ null
US domestic CUSIP.
bbg_comp_id
StringÂ orÂ null
Bloomberg composite global ID.
bbg_comp_ticker
StringÂ orÂ null
Bloomberg composite ticker.
figi
StringÂ orÂ null
Bloomberg FIGI, that is exchange level ID.
figi_ticker
StringÂ orÂ null
Bloomberg exchange level ticker.
fisn
StringÂ orÂ null
Financial Instrument Short Name.
StringÂ orÂ null
Legal Entity Identifier.
StringÂ orÂ null
Standard Industrial Classification Code.
StringÂ orÂ null
Central Index Key.
gics
StringÂ orÂ null
Global Industry Standard Classification.
naics
StringÂ orÂ null
North American Industrial Classification System.
StringÂ orÂ null
Complementary Identification Code.
StringÂ orÂ null
Classification of Financial Instruments as an ISO 10962 string.
incorporation_country
EnumÂ orÂ null
Country of incorporation code of the issuer as two letter ISO 3166-1 alpha-2 string. See CNTRY enum.
listing_country
EnumÂ orÂ null
Listing country as two letter ISO 3166-1 alpha-2 string. See CNTRY enum.
register_country
EnumÂ orÂ null
Register country as two letter ISO 3166-1 alpha-2 string. See CNTRY enum.
trading_currency
EnumÂ orÂ null
Trading currency as an ISO 4217 string. See CUREN enum.
multi_currency
Boolean
True if there is currently more than one listing in the market, otherwise false.
segment_mic_name
StringÂ orÂ null
Market Segment Name. Not the MICSEG lookup name but used when no segment MIC is available.
segment_mic
EnumÂ orÂ null
Market Identifier Code (MIC) as an ISO 10383 string. See MICSEG enum.
structure
EnumÂ orÂ null
Security structure code. See STRUCTCD enum.
lot_size
NumberÂ orÂ null
Lot Size. Indicates the minimum number of shares that can be acquired in one transaction.
par_value
NumberÂ orÂ null
Par value amount.
par_value_currency
EnumÂ orÂ null
Par value currency as an ISO 4217 string. See CUREN enum.
voting
EnumÂ orÂ null
Voting or non-voting rights. See VOTING enum.
vote_per_sec
NumberÂ orÂ null
Number of votes per security.
shares_outstanding
StringÂ orÂ null
Shares outstanding.
shares_outstanding_date
StringÂ orÂ null
Effective date for shares_outstanding.
ts_created
Timestamp
The timestamp (UTC) the record was added to database.
IdentifiersIdentifiers for listing, security and issuer are grouped at the beginning of each record, which enables
clearer comparisons of where a single security is associated with many individual listings across
different exchanges. There is one primary_exchange for a security, and it may then be listed
on multiple secondary exchanges. Python Python C++ Rust HTTP/Raw
